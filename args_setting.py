import argparse

def get_args():
    parser = argparse.ArgumentParser()
    
    parser.add_argument('--no-cuda', action='store_true', default=False, help='does not use GPU')
    parser.add_argument('--base-model', default='LSTM', help='base recurrent model, must be one of DialogRNN/LSTM/GRU')
    parser.add_argument('--graph-model', action='store_true', default=True, help='whether to use graph model after recurrent encoding')
    parser.add_argument('--nodal-attention', action='store_true', default=True, help='whether to use nodal attention in graph model: Equation 4,5,6 in Paper')
    parser.add_argument('--windowp', type=int, default=10, help='context window size for constructing edges in graph model for past utterances')
    parser.add_argument('--windowf', type=int, default=10, help='context window size for constructing edges in graph model for future utterances')
    parser.add_argument('--lr', type=float, default=0.0001, metavar='LR', help='learning rate')
    parser.add_argument('--l2', type=float, default=0.00003, metavar='L2', help='L2 regularization weight')
    parser.add_argument('--rec-dropout', type=float, default=0.1, metavar='rec_dropout', help='rec_dropout rate')
    parser.add_argument('--dropout', type=float, default=0.5, metavar='dropout', help='dropout rate')
    parser.add_argument('--batch-size', type=int, default=32, metavar='BS', help='batch size')
    parser.add_argument('--epochs', type=int, default=60, metavar='E', help='number of epochs')
    parser.add_argument('--class-weight', action='store_true', default=True, help='use class weights')
    parser.add_argument('--active-listener', action='store_true', default=False, help='active listener')
    parser.add_argument('--attention', default='general', help='Attention type in DialogRNN model')
    parser.add_argument('--tensorboard', action='store_true', default=False, help='Enables tensorboard log')
    parser.add_argument('--graph_type', default='relation', help='relation/GCN3/DeepGCN/MMGCN/MMGCN2')
    parser.add_argument('--use_topic', action='store_true', default=False, help='whether to use topic information')
    parser.add_argument('--alpha', type=float, default=0.2, help='alpha')
    parser.add_argument('--multiheads', type=int, default=6, help='multiheads')
    parser.add_argument('--graph_construct', default='full', help='single/window/fc for MMGCN2; direct/full for others')
    parser.add_argument('--use_gcn', action='store_true', default=False, help='whether to combine spectral and none-spectral methods or not')
    parser.add_argument('--use_residue', action='store_true', default=False, help='whether to use residue information or not')
    parser.add_argument('--multi_modal', action='store_true', default=False, help='whether to use multimodal information')
    parser.add_argument('--mm_fusion_mthd', default='concat', help='method to use multimodal information: concat, gated, concat_subsequently')
    parser.add_argument('--modals', default='avl', help='modals to fusion')
    parser.add_argument('--av_using_lstm', action='store_true', default=False, help='whether to use lstm in acoustic and visual modality')
    parser.add_argument('--Deep_GCN_nlayers', type=int, default=4, help='Deep_GCN_nlayers')
    parser.add_argument('--Dataset', default='IEMOCAP', help='dataset to train and test')
    parser.add_argument('--use_speaker', action='store_true', default=True, help='whether to use speaker embedding')
    parser.add_argument('--use_modal', action='store_true', default=False, help='whether to use modal embedding')
    parser.add_argument('--norm', default='LN2', help='NORM type')
    parser.add_argument('--testing', action='store_true', default=False, help='testing')
    parser.add_argument('--num_L', type=int, default=3, help='num_hyperconvs')
    parser.add_argument('--num_K', type=int, default=4, help='num_convs')
    parser.add_argument('--seed', type=int, default=1475)
    parser.add_argument('--calibrate', default=False, action='store_true')
    parser.add_argument('--rank_coff', type=float, default=0)
    parser.add_argument('--contrastlearning', default=False, action='store_true')
    parser.add_argument('--mscl_coff', type=float, default=0)
    parser.add_argument('--cscl_coff', type=float, default=0)
    parser.add_argument('--courselearning', default=False, action='store_true')
    parser.add_argument('--epoch_ratio', type=float, default=0)
    parser.add_argument('--scheduler_steps', type=int, default=0)
    parser.add_argument('--save_dir', type=str, default='./saved_models', help='directory to save the models')
    parser.add_argument('--max_epoch', type=int, default=20, help='Maximum number of training epochs')
    parser.add_argument('--base_temp', type=float, default=2.0, help='Base temperature for the model')
    parser.add_argument('--min_temp', type=float, default=0.5, help='Minimum temperature for the model')
    parser.add_argument('--key_weight', type=float, default=2.0, help='Weight for key elements in the model')
    parser.add_argument('--alpha_max', type=float, default=0.3, help='Maximum alpha value for the model')
    parser.add_argument('--warmup_epochs', type=int, default=3, help='Number of warmup epochs')
    return parser.parse_args()
